const U="http://10.0.0.30:30068",T="http://10.0.0.30:4533",b="http://10.0.0.30:8686";const k="juan",_="GoldSoul40",w={ollamaUrl:U,navidromeUrl:T,lidarrUrl:b,lidarrApiKey:"",navidromeUsername:k,navidromePassword:_};var g={};let h={...w,lidarrApiKey:""};if(typeof window<"u"){const e=localStorage.getItem("serviceConfig");if(e)try{h={...h,...JSON.parse(e)}}catch(o){console.warn("Invalid config in localStorage:",o)}}else h={...w,lidarrApiKey:g.LIDARR_API_KEY||"",navidromeUsername:g.NAVIDROME_USERNAME||w.navidromeUsername,navidromePassword:g.NAVIDROME_PASSWORD||w.navidromePassword};function E(){return h}let u=null,p=null,I=null,S=null,v=0;const P=300*1e3;async function x(){const e=E();if(!e.navidromeUrl||!e.navidromeUsername||!e.navidromePassword)throw new Error("Navidrome credentials incomplete");const o=Date.now();if(u&&o<v-P)return u;const r=new AbortController,t=setTimeout(()=>r.abort(),5e3);try{const n=await fetch(`${e.navidromeUrl}/auth/login`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:e.navidromeUsername,password:e.navidromePassword}),signal:r.signal});if(clearTimeout(t),!n.ok)throw new Error(`Login failed: ${n.statusText}`);const a=await n.json();if(!a.token||!a.id)throw new Error("No token or id received from login");return u=a.token,p=a.id,I=a.subsonicToken,S=a.subsonicSalt,v=o+3600*1e3,u}catch(n){throw clearTimeout(t),n instanceof Error&&n.name==="AbortError"?new Error("Login request timed out"):new Error(`Authentication error: ${n instanceof Error?n.message:"Unknown error"}`)}}async function f(e,o={}){let r=0;const t=1;for(;r<=t;){const n=await x(),a=new AbortController,d=setTimeout(()=>a.abort(),5e3);try{const c=p;if(!c)throw new Error("Client ID not available");const s=await fetch(`${E().navidromeUrl}${e}`,{...o,headers:{"x-nd-authorization":`Bearer ${n}`,"x-nd-client-unique-id":c,...o.headers},signal:a.signal});if(clearTimeout(d),s.status===401){u=null,p=null,r++;continue}if(!s.ok)throw new Error(`API request failed: ${s.status} ${s.statusText}`);const m=s.headers.get("content-type");return m&&m.includes("application/json")?await s.json():await s.text()}catch(c){if(clearTimeout(d),c instanceof Error&&c.name==="AbortError")throw new Error("API request timed out (5s limit)");if(r<t){r++;continue}throw new Error(`API fetch error: ${c instanceof Error?c.message:"Unknown error"}`)}}throw new Error("Max retries exceeded for API request")}async function C(e=0,o=1e3){try{const r=`/api/artist?_start=${e}&_end=${e+o-1}`;return await f(r)||[]}catch(r){throw new Error(`Failed to fetch artists: ${r instanceof Error?r.message:"Unknown error"}`)}}async function R(e,o=0,r=50){try{return await f(`/api/album?artist_id=${e}&_start=${o}&_end=${o+r-1}`)||[]}catch(t){throw new Error(`Failed to fetch albums: ${t instanceof Error?t.message:"Unknown error"}`)}}async function N(e,o=0,r=50){try{return(await f(`/api/song?album_id=${e}&_start=${o}&_end=${o+r-1}`)).map(a=>({...a,url:`/api/navidrome/stream/${a.id}`}))||[]}catch(t){throw new Error(`Failed to fetch songs: ${t instanceof Error?t.message:"Unknown error"}`)}}async function L(e,o=0,r=5){try{if(!E().navidromeUrl)throw new Error("Navidrome URL not configured");const n=e.match(/^(.+?)\s*-\s*(.+)$/),a=n?n[1].trim():"",d=n?n[2].trim():e,c=[{param:"title",value:d},{param:"fullText",value:`${a} ${d}`},{param:"fullText",value:e}];let s=[];for(const i of c)try{const l=`/api/song?${i.param}=${encodeURIComponent(i.value)}&_start=${o}&_end=${o+r-1}`;if(console.log(`Trying search with parameter ${i.param}:`,l),s=await f(l),s&&s.length>0){console.log(`Search with ${i.param} returned ${s.length} results`);break}}catch(l){console.log(`Search with ${i.param} failed:`,l);continue}if(s.length===0)return console.log("No results from any search parameter"),[];const m=s.filter(i=>{const l=(i.name||i.title||"").toLowerCase(),y=a.toLowerCase(),A=d.toLowerCase();return l.includes(y)&&l.includes(A)});console.log(`Filtered to ${m.length} better matches from ${s.length} total`);const $=m.slice(0,r).map(i=>({...i,name:i.name||i.title||"Unknown Title",url:`/api/navidrome/stream/${i.id}`}));return console.log("Final processed search results:",$.length,"songs"),$}catch(t){throw console.error("Comprehensive search error:",t),new Error(`Failed to search music: ${t instanceof Error?t.message:"Unknown error"}`)}}export{R as a,N as b,C as g,L as s};
