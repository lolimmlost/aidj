/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from "@tanstack/react-start/server";

import { Route as rootRouteImport } from "./routes/__root";
import { Route as ConfigRouteImport } from "./routes/config";
import { Route as DashboardRouteRouteImport } from "./routes/dashboard/route";
import { Route as authRouteRouteImport } from "./routes/(auth)/route";
import { Route as IndexRouteImport } from "./routes/index";
import { Route as SettingsIndexRouteImport } from "./routes/settings/index";
import { Route as PlaylistsIndexRouteImport } from "./routes/playlists/index";
import { Route as DownloadsIndexRouteImport } from "./routes/downloads/index";
import { Route as DashboardIndexRouteImport } from "./routes/dashboard/index";
import { Route as PlaylistsIdRouteImport } from "./routes/playlists/$id";
import { Route as LibrarySearchRouteImport } from "./routes/library/search";
import { Route as LibraryArtistsRouteImport } from "./routes/library/artists";
import { Route as DownloadsStatusRouteImport } from "./routes/downloads/status";
import { Route as DownloadsHistoryRouteImport } from "./routes/downloads/history";
import { Route as DashboardAnalyticsRouteImport } from "./routes/dashboard/analytics";
import { Route as authSignupRouteImport } from "./routes/(auth)/signup";
import { Route as authLoginRouteImport } from "./routes/(auth)/login";
import { Route as LibraryArtistsIdRouteImport } from "./routes/library/artists/[id]";
import { Route as DashboardRecommendationsIdRouteImport } from "./routes/dashboard/recommendations/[id]";
import { Route as LibraryArtistsIdAlbumsAlbumIdRouteImport } from "./routes/library/artists/[id]/albums/[albumId]";
import { ServerRoute as ApiSearchServerRouteImport } from "./routes/api/search";
import { ServerRoute as ApiRecommendationsServerRouteImport } from "./routes/api/recommendations";
import { ServerRoute as ApiPreferencesServerRouteImport } from "./routes/api/preferences";
import { ServerRoute as ApiPlaylistServerRouteImport } from "./routes/api/playlist";
import { ServerRoute as ApiDebugLibraryServerRouteImport } from "./routes/api/debug-library";
import { ServerRoute as ApiConfigServerRouteImport } from "./routes/api/config";
import { ServerRoute as ApiPlaylistsIndexServerRouteImport } from "./routes/api/playlists/index";
import { ServerRoute as ApiRecommendationsSeasonalPlaylistServerRouteImport } from "./routes/api/recommendations/seasonal-playlist";
import { ServerRoute as ApiRecommendationsSeasonalInsightsServerRouteImport } from "./routes/api/recommendations/seasonal-insights";
import { ServerRoute as ApiRecommendationsFeedbackServerRouteImport } from "./routes/api/recommendations/feedback";
import { ServerRoute as ApiRecommendationsExportServerRouteImport } from "./routes/api/recommendations/export";
import { ServerRoute as ApiRecommendationsClearServerRouteImport } from "./routes/api/recommendations/clear";
import { ServerRoute as ApiRecommendationsAnalyticsServerRouteImport } from "./routes/api/recommendations/analytics";
import { ServerRoute as ApiPlaylistsSyncServerRouteImport } from "./routes/api/playlists/sync";
import { ServerRoute as ApiPlaylistsIdServerRouteImport } from "./routes/api/playlists/$id";
import { ServerRoute as ApiLidarrStatusServerRouteImport } from "./routes/api/lidarr/status";
import { ServerRoute as ApiLidarrSearchServerRouteImport } from "./routes/api/lidarr/search";
import { ServerRoute as ApiLidarrHistoryServerRouteImport } from "./routes/api/lidarr/history";
import { ServerRoute as ApiLidarrCancelServerRouteImport } from "./routes/api/lidarr/cancel";
import { ServerRoute as ApiLidarrAvailabilityServerRouteImport } from "./routes/api/lidarr/availability";
import { ServerRoute as ApiLidarrAddServerRouteImport } from "./routes/api/lidarr/add";
import { ServerRoute as ApiLibraryProfileAnalyzeServerRouteImport } from "./routes/api/library-profile/analyze";
import { ServerRoute as ApiAuthRegisterServerRouteImport } from "./routes/api/auth/register";
import { ServerRoute as ApiAuthLoginServerRouteImport } from "./routes/api/auth/login";
import { ServerRoute as ApiAuthSplatServerRouteImport } from "./routes/api/auth/$";
import { ServerRoute as ApiPlaylistsSmartIndexServerRouteImport } from "./routes/api/playlists/smart/index";
import { ServerRoute as ApiPlaylistsSmartPreviewServerRouteImport } from "./routes/api/playlists/smart/preview";
import { ServerRoute as ApiPlaylistsLikedSongsSyncServerRouteImport } from "./routes/api/playlists/liked-songs/sync";
import { ServerRoute as ApiNavidromeStreamIdServerRouteImport } from "./routes/api/navidrome/stream/$id";
import { ServerRoute as ApiNavidromeChar91DotPathChar93ServerRouteImport } from "./routes/api/navidrome/[...path]";
import { ServerRoute as ApiPlaylistsIdSongsIndexServerRouteImport } from "./routes/api/playlists/$id/songs/index";
import { ServerRoute as ApiPlaylistsIdSongsSongIdServerRouteImport } from "./routes/api/playlists/$id/songs/$songId";
import { ServerRoute as ApiNavidromeStreamIdIdServerRouteImport } from "./routes/api/navidrome/stream/[id]/[id]";

const rootServerRouteImport = createServerRootRoute();

const ConfigRoute = ConfigRouteImport.update({
  id: "/config",
  path: "/config",
  getParentRoute: () => rootRouteImport,
} as any);
const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: "/dashboard",
  path: "/dashboard",
  getParentRoute: () => rootRouteImport,
} as any);
const authRouteRoute = authRouteRouteImport.update({
  id: "/(auth)",
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any);
const SettingsIndexRoute = SettingsIndexRouteImport.update({
  id: "/settings/",
  path: "/settings/",
  getParentRoute: () => rootRouteImport,
} as any);
const PlaylistsIndexRoute = PlaylistsIndexRouteImport.update({
  id: "/playlists/",
  path: "/playlists/",
  getParentRoute: () => rootRouteImport,
} as any);
const DownloadsIndexRoute = DownloadsIndexRouteImport.update({
  id: "/downloads/",
  path: "/downloads/",
  getParentRoute: () => rootRouteImport,
} as any);
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => DashboardRouteRoute,
} as any);
const PlaylistsIdRoute = PlaylistsIdRouteImport.update({
  id: "/playlists/$id",
  path: "/playlists/$id",
  getParentRoute: () => rootRouteImport,
} as any);
const LibrarySearchRoute = LibrarySearchRouteImport.update({
  id: "/library/search",
  path: "/library/search",
  getParentRoute: () => rootRouteImport,
} as any);
const LibraryArtistsRoute = LibraryArtistsRouteImport.update({
  id: "/library/artists",
  path: "/library/artists",
  getParentRoute: () => rootRouteImport,
} as any);
const DownloadsStatusRoute = DownloadsStatusRouteImport.update({
  id: "/downloads/status",
  path: "/downloads/status",
  getParentRoute: () => rootRouteImport,
} as any);
const DownloadsHistoryRoute = DownloadsHistoryRouteImport.update({
  id: "/downloads/history",
  path: "/downloads/history",
  getParentRoute: () => rootRouteImport,
} as any);
const DashboardAnalyticsRoute = DashboardAnalyticsRouteImport.update({
  id: "/analytics",
  path: "/analytics",
  getParentRoute: () => DashboardRouteRoute,
} as any);
const authSignupRoute = authSignupRouteImport.update({
  id: "/signup",
  path: "/signup",
  getParentRoute: () => authRouteRoute,
} as any);
const authLoginRoute = authLoginRouteImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => authRouteRoute,
} as any);
const LibraryArtistsIdRoute = LibraryArtistsIdRouteImport.update({
  id: "/id",
  path: "/id",
  getParentRoute: () => LibraryArtistsRoute,
} as any);
const DashboardRecommendationsIdRoute =
  DashboardRecommendationsIdRouteImport.update({
    id: "/recommendations/id",
    path: "/recommendations/id",
    getParentRoute: () => DashboardRouteRoute,
  } as any);
const LibraryArtistsIdAlbumsAlbumIdRoute =
  LibraryArtistsIdAlbumsAlbumIdRouteImport.update({
    id: "/albums/albumId",
    path: "/albums/albumId",
    getParentRoute: () => LibraryArtistsIdRoute,
  } as any);
const ApiSearchServerRoute = ApiSearchServerRouteImport.update({
  id: "/api/search",
  path: "/api/search",
  getParentRoute: () => rootServerRouteImport,
} as any);
const ApiRecommendationsServerRoute =
  ApiRecommendationsServerRouteImport.update({
    id: "/api/recommendations",
    path: "/api/recommendations",
    getParentRoute: () => rootServerRouteImport,
  } as any);
const ApiPreferencesServerRoute = ApiPreferencesServerRouteImport.update({
  id: "/api/preferences",
  path: "/api/preferences",
  getParentRoute: () => rootServerRouteImport,
} as any);
const ApiPlaylistServerRoute = ApiPlaylistServerRouteImport.update({
  id: "/api/playlist",
  path: "/api/playlist",
  getParentRoute: () => rootServerRouteImport,
} as any);
const ApiDebugLibraryServerRoute = ApiDebugLibraryServerRouteImport.update({
  id: "/api/debug-library",
  path: "/api/debug-library",
  getParentRoute: () => rootServerRouteImport,
} as any);
const ApiConfigServerRoute = ApiConfigServerRouteImport.update({
  id: "/api/config",
  path: "/api/config",
  getParentRoute: () => rootServerRouteImport,
} as any);
const ApiPlaylistsIndexServerRoute = ApiPlaylistsIndexServerRouteImport.update({
  id: "/api/playlists/",
  path: "/api/playlists/",
  getParentRoute: () => rootServerRouteImport,
} as any);
const ApiRecommendationsSeasonalPlaylistServerRoute =
  ApiRecommendationsSeasonalPlaylistServerRouteImport.update({
    id: "/seasonal-playlist",
    path: "/seasonal-playlist",
    getParentRoute: () => ApiRecommendationsServerRoute,
  } as any);
const ApiRecommendationsSeasonalInsightsServerRoute =
  ApiRecommendationsSeasonalInsightsServerRouteImport.update({
    id: "/seasonal-insights",
    path: "/seasonal-insights",
    getParentRoute: () => ApiRecommendationsServerRoute,
  } as any);
const ApiRecommendationsFeedbackServerRoute =
  ApiRecommendationsFeedbackServerRouteImport.update({
    id: "/feedback",
    path: "/feedback",
    getParentRoute: () => ApiRecommendationsServerRoute,
  } as any);
const ApiRecommendationsExportServerRoute =
  ApiRecommendationsExportServerRouteImport.update({
    id: "/export",
    path: "/export",
    getParentRoute: () => ApiRecommendationsServerRoute,
  } as any);
const ApiRecommendationsClearServerRoute =
  ApiRecommendationsClearServerRouteImport.update({
    id: "/clear",
    path: "/clear",
    getParentRoute: () => ApiRecommendationsServerRoute,
  } as any);
const ApiRecommendationsAnalyticsServerRoute =
  ApiRecommendationsAnalyticsServerRouteImport.update({
    id: "/analytics",
    path: "/analytics",
    getParentRoute: () => ApiRecommendationsServerRoute,
  } as any);
const ApiPlaylistsSyncServerRoute = ApiPlaylistsSyncServerRouteImport.update({
  id: "/api/playlists/sync",
  path: "/api/playlists/sync",
  getParentRoute: () => rootServerRouteImport,
} as any);
const ApiPlaylistsIdServerRoute = ApiPlaylistsIdServerRouteImport.update({
  id: "/api/playlists/$id",
  path: "/api/playlists/$id",
  getParentRoute: () => rootServerRouteImport,
} as any);
const ApiLidarrStatusServerRoute = ApiLidarrStatusServerRouteImport.update({
  id: "/api/lidarr/status",
  path: "/api/lidarr/status",
  getParentRoute: () => rootServerRouteImport,
} as any);
const ApiLidarrSearchServerRoute = ApiLidarrSearchServerRouteImport.update({
  id: "/api/lidarr/search",
  path: "/api/lidarr/search",
  getParentRoute: () => rootServerRouteImport,
} as any);
const ApiLidarrHistoryServerRoute = ApiLidarrHistoryServerRouteImport.update({
  id: "/api/lidarr/history",
  path: "/api/lidarr/history",
  getParentRoute: () => rootServerRouteImport,
} as any);
const ApiLidarrCancelServerRoute = ApiLidarrCancelServerRouteImport.update({
  id: "/api/lidarr/cancel",
  path: "/api/lidarr/cancel",
  getParentRoute: () => rootServerRouteImport,
} as any);
const ApiLidarrAvailabilityServerRoute =
  ApiLidarrAvailabilityServerRouteImport.update({
    id: "/api/lidarr/availability",
    path: "/api/lidarr/availability",
    getParentRoute: () => rootServerRouteImport,
  } as any);
const ApiLidarrAddServerRoute = ApiLidarrAddServerRouteImport.update({
  id: "/api/lidarr/add",
  path: "/api/lidarr/add",
  getParentRoute: () => rootServerRouteImport,
} as any);
const ApiLibraryProfileAnalyzeServerRoute =
  ApiLibraryProfileAnalyzeServerRouteImport.update({
    id: "/api/library-profile/analyze",
    path: "/api/library-profile/analyze",
    getParentRoute: () => rootServerRouteImport,
  } as any);
const ApiAuthRegisterServerRoute = ApiAuthRegisterServerRouteImport.update({
  id: "/api/auth/register",
  path: "/api/auth/register",
  getParentRoute: () => rootServerRouteImport,
} as any);
const ApiAuthLoginServerRoute = ApiAuthLoginServerRouteImport.update({
  id: "/api/auth/login",
  path: "/api/auth/login",
  getParentRoute: () => rootServerRouteImport,
} as any);
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: "/api/auth/$",
  path: "/api/auth/$",
  getParentRoute: () => rootServerRouteImport,
} as any);
const ApiPlaylistsSmartIndexServerRoute =
  ApiPlaylistsSmartIndexServerRouteImport.update({
    id: "/api/playlists/smart/",
    path: "/api/playlists/smart/",
    getParentRoute: () => rootServerRouteImport,
  } as any);
const ApiPlaylistsSmartPreviewServerRoute =
  ApiPlaylistsSmartPreviewServerRouteImport.update({
    id: "/api/playlists/smart/preview",
    path: "/api/playlists/smart/preview",
    getParentRoute: () => rootServerRouteImport,
  } as any);
const ApiPlaylistsLikedSongsSyncServerRoute =
  ApiPlaylistsLikedSongsSyncServerRouteImport.update({
    id: "/api/playlists/liked-songs/sync",
    path: "/api/playlists/liked-songs/sync",
    getParentRoute: () => rootServerRouteImport,
  } as any);
const ApiNavidromeStreamIdServerRoute =
  ApiNavidromeStreamIdServerRouteImport.update({
    id: "/api/navidrome/stream/$id",
    path: "/api/navidrome/stream/$id",
    getParentRoute: () => rootServerRouteImport,
  } as any);
const ApiNavidromeChar91DotPathChar93ServerRoute =
  ApiNavidromeChar91DotPathChar93ServerRouteImport.update({
    id: "/api/navidrome/[./path]",
    path: "/api/navidrome/[./path]",
    getParentRoute: () => rootServerRouteImport,
  } as any);
const ApiPlaylistsIdSongsIndexServerRoute =
  ApiPlaylistsIdSongsIndexServerRouteImport.update({
    id: "/songs/",
    path: "/songs/",
    getParentRoute: () => ApiPlaylistsIdServerRoute,
  } as any);
const ApiPlaylistsIdSongsSongIdServerRoute =
  ApiPlaylistsIdSongsSongIdServerRouteImport.update({
    id: "/songs/$songId",
    path: "/songs/$songId",
    getParentRoute: () => ApiPlaylistsIdServerRoute,
  } as any);
const ApiNavidromeStreamIdIdServerRoute =
  ApiNavidromeStreamIdIdServerRouteImport.update({
    id: "/api/navidrome/stream/id/id",
    path: "/api/navidrome/stream/id/id",
    getParentRoute: () => rootServerRouteImport,
  } as any);

export interface FileRoutesByFullPath {
  "/": typeof authRouteRouteWithChildren;
  "/dashboard": typeof DashboardRouteRouteWithChildren;
  "/config": typeof ConfigRoute;
  "/login": typeof authLoginRoute;
  "/signup": typeof authSignupRoute;
  "/dashboard/analytics": typeof DashboardAnalyticsRoute;
  "/downloads/history": typeof DownloadsHistoryRoute;
  "/downloads/status": typeof DownloadsStatusRoute;
  "/library/artists": typeof LibraryArtistsRouteWithChildren;
  "/library/search": typeof LibrarySearchRoute;
  "/playlists/$id": typeof PlaylistsIdRoute;
  "/dashboard/": typeof DashboardIndexRoute;
  "/downloads": typeof DownloadsIndexRoute;
  "/playlists": typeof PlaylistsIndexRoute;
  "/settings": typeof SettingsIndexRoute;
  "/dashboard/recommendations/id": typeof DashboardRecommendationsIdRoute;
  "/library/artists/id": typeof LibraryArtistsIdRouteWithChildren;
  "/library/artists/id/albums/albumId": typeof LibraryArtistsIdAlbumsAlbumIdRoute;
}
export interface FileRoutesByTo {
  "/": typeof authRouteRouteWithChildren;
  "/config": typeof ConfigRoute;
  "/login": typeof authLoginRoute;
  "/signup": typeof authSignupRoute;
  "/dashboard/analytics": typeof DashboardAnalyticsRoute;
  "/downloads/history": typeof DownloadsHistoryRoute;
  "/downloads/status": typeof DownloadsStatusRoute;
  "/library/artists": typeof LibraryArtistsRouteWithChildren;
  "/library/search": typeof LibrarySearchRoute;
  "/playlists/$id": typeof PlaylistsIdRoute;
  "/dashboard": typeof DashboardIndexRoute;
  "/downloads": typeof DownloadsIndexRoute;
  "/playlists": typeof PlaylistsIndexRoute;
  "/settings": typeof SettingsIndexRoute;
  "/dashboard/recommendations/id": typeof DashboardRecommendationsIdRoute;
  "/library/artists/id": typeof LibraryArtistsIdRouteWithChildren;
  "/library/artists/id/albums/albumId": typeof LibraryArtistsIdAlbumsAlbumIdRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexRoute;
  "/(auth)": typeof authRouteRouteWithChildren;
  "/dashboard": typeof DashboardRouteRouteWithChildren;
  "/config": typeof ConfigRoute;
  "/(auth)/login": typeof authLoginRoute;
  "/(auth)/signup": typeof authSignupRoute;
  "/dashboard/analytics": typeof DashboardAnalyticsRoute;
  "/downloads/history": typeof DownloadsHistoryRoute;
  "/downloads/status": typeof DownloadsStatusRoute;
  "/library/artists": typeof LibraryArtistsRouteWithChildren;
  "/library/search": typeof LibrarySearchRoute;
  "/playlists/$id": typeof PlaylistsIdRoute;
  "/dashboard/": typeof DashboardIndexRoute;
  "/downloads/": typeof DownloadsIndexRoute;
  "/playlists/": typeof PlaylistsIndexRoute;
  "/settings/": typeof SettingsIndexRoute;
  "/dashboard/recommendations/id": typeof DashboardRecommendationsIdRoute;
  "/library/artists/id": typeof LibraryArtistsIdRouteWithChildren;
  "/library/artists/id/albums/albumId": typeof LibraryArtistsIdAlbumsAlbumIdRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/dashboard"
    | "/config"
    | "/login"
    | "/signup"
    | "/dashboard/analytics"
    | "/downloads/history"
    | "/downloads/status"
    | "/library/artists"
    | "/library/search"
    | "/playlists/$id"
    | "/dashboard/"
    | "/downloads"
    | "/playlists"
    | "/settings"
    | "/dashboard/recommendations/id"
    | "/library/artists/id"
    | "/library/artists/id/albums/albumId";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/config"
    | "/login"
    | "/signup"
    | "/dashboard/analytics"
    | "/downloads/history"
    | "/downloads/status"
    | "/library/artists"
    | "/library/search"
    | "/playlists/$id"
    | "/dashboard"
    | "/downloads"
    | "/playlists"
    | "/settings"
    | "/dashboard/recommendations/id"
    | "/library/artists/id"
    | "/library/artists/id/albums/albumId";
  id:
    | "__root__"
    | "/"
    | "/(auth)"
    | "/dashboard"
    | "/config"
    | "/(auth)/login"
    | "/(auth)/signup"
    | "/dashboard/analytics"
    | "/downloads/history"
    | "/downloads/status"
    | "/library/artists"
    | "/library/search"
    | "/playlists/$id"
    | "/dashboard/"
    | "/downloads/"
    | "/playlists/"
    | "/settings/"
    | "/dashboard/recommendations/id"
    | "/library/artists/id"
    | "/library/artists/id/albums/albumId";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  authRouteRoute: typeof authRouteRouteWithChildren;
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren;
  ConfigRoute: typeof ConfigRoute;
  DownloadsHistoryRoute: typeof DownloadsHistoryRoute;
  DownloadsStatusRoute: typeof DownloadsStatusRoute;
  LibraryArtistsRoute: typeof LibraryArtistsRouteWithChildren;
  LibrarySearchRoute: typeof LibrarySearchRoute;
  PlaylistsIdRoute: typeof PlaylistsIdRoute;
  DownloadsIndexRoute: typeof DownloadsIndexRoute;
  PlaylistsIndexRoute: typeof PlaylistsIndexRoute;
  SettingsIndexRoute: typeof SettingsIndexRoute;
}
export interface FileServerRoutesByFullPath {
  "/api/config": typeof ApiConfigServerRoute;
  "/api/debug-library": typeof ApiDebugLibraryServerRoute;
  "/api/playlist": typeof ApiPlaylistServerRoute;
  "/api/preferences": typeof ApiPreferencesServerRoute;
  "/api/recommendations": typeof ApiRecommendationsServerRouteWithChildren;
  "/api/search": typeof ApiSearchServerRoute;
  "/api/auth/$": typeof ApiAuthSplatServerRoute;
  "/api/auth/login": typeof ApiAuthLoginServerRoute;
  "/api/auth/register": typeof ApiAuthRegisterServerRoute;
  "/api/library-profile/analyze": typeof ApiLibraryProfileAnalyzeServerRoute;
  "/api/lidarr/add": typeof ApiLidarrAddServerRoute;
  "/api/lidarr/availability": typeof ApiLidarrAvailabilityServerRoute;
  "/api/lidarr/cancel": typeof ApiLidarrCancelServerRoute;
  "/api/lidarr/history": typeof ApiLidarrHistoryServerRoute;
  "/api/lidarr/search": typeof ApiLidarrSearchServerRoute;
  "/api/lidarr/status": typeof ApiLidarrStatusServerRoute;
  "/api/playlists/$id": typeof ApiPlaylistsIdServerRouteWithChildren;
  "/api/playlists/sync": typeof ApiPlaylistsSyncServerRoute;
  "/api/recommendations/analytics": typeof ApiRecommendationsAnalyticsServerRoute;
  "/api/recommendations/clear": typeof ApiRecommendationsClearServerRoute;
  "/api/recommendations/export": typeof ApiRecommendationsExportServerRoute;
  "/api/recommendations/feedback": typeof ApiRecommendationsFeedbackServerRoute;
  "/api/recommendations/seasonal-insights": typeof ApiRecommendationsSeasonalInsightsServerRoute;
  "/api/recommendations/seasonal-playlist": typeof ApiRecommendationsSeasonalPlaylistServerRoute;
  "/api/playlists": typeof ApiPlaylistsIndexServerRoute;
  "/api/navidrome/[./path]": typeof ApiNavidromeChar91DotPathChar93ServerRoute;
  "/api/navidrome/stream/$id": typeof ApiNavidromeStreamIdServerRoute;
  "/api/playlists/liked-songs/sync": typeof ApiPlaylistsLikedSongsSyncServerRoute;
  "/api/playlists/smart/preview": typeof ApiPlaylistsSmartPreviewServerRoute;
  "/api/playlists/smart": typeof ApiPlaylistsSmartIndexServerRoute;
  "/api/navidrome/stream/id/id": typeof ApiNavidromeStreamIdIdServerRoute;
  "/api/playlists/$id/songs/$songId": typeof ApiPlaylistsIdSongsSongIdServerRoute;
  "/api/playlists/$id/songs": typeof ApiPlaylistsIdSongsIndexServerRoute;
}
export interface FileServerRoutesByTo {
  "/api/config": typeof ApiConfigServerRoute;
  "/api/debug-library": typeof ApiDebugLibraryServerRoute;
  "/api/playlist": typeof ApiPlaylistServerRoute;
  "/api/preferences": typeof ApiPreferencesServerRoute;
  "/api/recommendations": typeof ApiRecommendationsServerRouteWithChildren;
  "/api/search": typeof ApiSearchServerRoute;
  "/api/auth/$": typeof ApiAuthSplatServerRoute;
  "/api/auth/login": typeof ApiAuthLoginServerRoute;
  "/api/auth/register": typeof ApiAuthRegisterServerRoute;
  "/api/library-profile/analyze": typeof ApiLibraryProfileAnalyzeServerRoute;
  "/api/lidarr/add": typeof ApiLidarrAddServerRoute;
  "/api/lidarr/availability": typeof ApiLidarrAvailabilityServerRoute;
  "/api/lidarr/cancel": typeof ApiLidarrCancelServerRoute;
  "/api/lidarr/history": typeof ApiLidarrHistoryServerRoute;
  "/api/lidarr/search": typeof ApiLidarrSearchServerRoute;
  "/api/lidarr/status": typeof ApiLidarrStatusServerRoute;
  "/api/playlists/$id": typeof ApiPlaylistsIdServerRouteWithChildren;
  "/api/playlists/sync": typeof ApiPlaylistsSyncServerRoute;
  "/api/recommendations/analytics": typeof ApiRecommendationsAnalyticsServerRoute;
  "/api/recommendations/clear": typeof ApiRecommendationsClearServerRoute;
  "/api/recommendations/export": typeof ApiRecommendationsExportServerRoute;
  "/api/recommendations/feedback": typeof ApiRecommendationsFeedbackServerRoute;
  "/api/recommendations/seasonal-insights": typeof ApiRecommendationsSeasonalInsightsServerRoute;
  "/api/recommendations/seasonal-playlist": typeof ApiRecommendationsSeasonalPlaylistServerRoute;
  "/api/playlists": typeof ApiPlaylistsIndexServerRoute;
  "/api/navidrome/[./path]": typeof ApiNavidromeChar91DotPathChar93ServerRoute;
  "/api/navidrome/stream/$id": typeof ApiNavidromeStreamIdServerRoute;
  "/api/playlists/liked-songs/sync": typeof ApiPlaylistsLikedSongsSyncServerRoute;
  "/api/playlists/smart/preview": typeof ApiPlaylistsSmartPreviewServerRoute;
  "/api/playlists/smart": typeof ApiPlaylistsSmartIndexServerRoute;
  "/api/navidrome/stream/id/id": typeof ApiNavidromeStreamIdIdServerRoute;
  "/api/playlists/$id/songs/$songId": typeof ApiPlaylistsIdSongsSongIdServerRoute;
  "/api/playlists/$id/songs": typeof ApiPlaylistsIdSongsIndexServerRoute;
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport;
  "/api/config": typeof ApiConfigServerRoute;
  "/api/debug-library": typeof ApiDebugLibraryServerRoute;
  "/api/playlist": typeof ApiPlaylistServerRoute;
  "/api/preferences": typeof ApiPreferencesServerRoute;
  "/api/recommendations": typeof ApiRecommendationsServerRouteWithChildren;
  "/api/search": typeof ApiSearchServerRoute;
  "/api/auth/$": typeof ApiAuthSplatServerRoute;
  "/api/auth/login": typeof ApiAuthLoginServerRoute;
  "/api/auth/register": typeof ApiAuthRegisterServerRoute;
  "/api/library-profile/analyze": typeof ApiLibraryProfileAnalyzeServerRoute;
  "/api/lidarr/add": typeof ApiLidarrAddServerRoute;
  "/api/lidarr/availability": typeof ApiLidarrAvailabilityServerRoute;
  "/api/lidarr/cancel": typeof ApiLidarrCancelServerRoute;
  "/api/lidarr/history": typeof ApiLidarrHistoryServerRoute;
  "/api/lidarr/search": typeof ApiLidarrSearchServerRoute;
  "/api/lidarr/status": typeof ApiLidarrStatusServerRoute;
  "/api/playlists/$id": typeof ApiPlaylistsIdServerRouteWithChildren;
  "/api/playlists/sync": typeof ApiPlaylistsSyncServerRoute;
  "/api/recommendations/analytics": typeof ApiRecommendationsAnalyticsServerRoute;
  "/api/recommendations/clear": typeof ApiRecommendationsClearServerRoute;
  "/api/recommendations/export": typeof ApiRecommendationsExportServerRoute;
  "/api/recommendations/feedback": typeof ApiRecommendationsFeedbackServerRoute;
  "/api/recommendations/seasonal-insights": typeof ApiRecommendationsSeasonalInsightsServerRoute;
  "/api/recommendations/seasonal-playlist": typeof ApiRecommendationsSeasonalPlaylistServerRoute;
  "/api/playlists/": typeof ApiPlaylistsIndexServerRoute;
  "/api/navidrome/[./path]": typeof ApiNavidromeChar91DotPathChar93ServerRoute;
  "/api/navidrome/stream/$id": typeof ApiNavidromeStreamIdServerRoute;
  "/api/playlists/liked-songs/sync": typeof ApiPlaylistsLikedSongsSyncServerRoute;
  "/api/playlists/smart/preview": typeof ApiPlaylistsSmartPreviewServerRoute;
  "/api/playlists/smart/": typeof ApiPlaylistsSmartIndexServerRoute;
  "/api/navidrome/stream/id/id": typeof ApiNavidromeStreamIdIdServerRoute;
  "/api/playlists/$id/songs/$songId": typeof ApiPlaylistsIdSongsSongIdServerRoute;
  "/api/playlists/$id/songs/": typeof ApiPlaylistsIdSongsIndexServerRoute;
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath;
  fullPaths:
    | "/api/config"
    | "/api/debug-library"
    | "/api/playlist"
    | "/api/preferences"
    | "/api/recommendations"
    | "/api/search"
    | "/api/auth/$"
    | "/api/auth/login"
    | "/api/auth/register"
    | "/api/library-profile/analyze"
    | "/api/lidarr/add"
    | "/api/lidarr/availability"
    | "/api/lidarr/cancel"
    | "/api/lidarr/history"
    | "/api/lidarr/search"
    | "/api/lidarr/status"
    | "/api/playlists/$id"
    | "/api/playlists/sync"
    | "/api/recommendations/analytics"
    | "/api/recommendations/clear"
    | "/api/recommendations/export"
    | "/api/recommendations/feedback"
    | "/api/recommendations/seasonal-insights"
    | "/api/recommendations/seasonal-playlist"
    | "/api/playlists"
    | "/api/navidrome/[./path]"
    | "/api/navidrome/stream/$id"
    | "/api/playlists/liked-songs/sync"
    | "/api/playlists/smart/preview"
    | "/api/playlists/smart"
    | "/api/navidrome/stream/id/id"
    | "/api/playlists/$id/songs/$songId"
    | "/api/playlists/$id/songs";
  fileServerRoutesByTo: FileServerRoutesByTo;
  to:
    | "/api/config"
    | "/api/debug-library"
    | "/api/playlist"
    | "/api/preferences"
    | "/api/recommendations"
    | "/api/search"
    | "/api/auth/$"
    | "/api/auth/login"
    | "/api/auth/register"
    | "/api/library-profile/analyze"
    | "/api/lidarr/add"
    | "/api/lidarr/availability"
    | "/api/lidarr/cancel"
    | "/api/lidarr/history"
    | "/api/lidarr/search"
    | "/api/lidarr/status"
    | "/api/playlists/$id"
    | "/api/playlists/sync"
    | "/api/recommendations/analytics"
    | "/api/recommendations/clear"
    | "/api/recommendations/export"
    | "/api/recommendations/feedback"
    | "/api/recommendations/seasonal-insights"
    | "/api/recommendations/seasonal-playlist"
    | "/api/playlists"
    | "/api/navidrome/[./path]"
    | "/api/navidrome/stream/$id"
    | "/api/playlists/liked-songs/sync"
    | "/api/playlists/smart/preview"
    | "/api/playlists/smart"
    | "/api/navidrome/stream/id/id"
    | "/api/playlists/$id/songs/$songId"
    | "/api/playlists/$id/songs";
  id:
    | "__root__"
    | "/api/config"
    | "/api/debug-library"
    | "/api/playlist"
    | "/api/preferences"
    | "/api/recommendations"
    | "/api/search"
    | "/api/auth/$"
    | "/api/auth/login"
    | "/api/auth/register"
    | "/api/library-profile/analyze"
    | "/api/lidarr/add"
    | "/api/lidarr/availability"
    | "/api/lidarr/cancel"
    | "/api/lidarr/history"
    | "/api/lidarr/search"
    | "/api/lidarr/status"
    | "/api/playlists/$id"
    | "/api/playlists/sync"
    | "/api/recommendations/analytics"
    | "/api/recommendations/clear"
    | "/api/recommendations/export"
    | "/api/recommendations/feedback"
    | "/api/recommendations/seasonal-insights"
    | "/api/recommendations/seasonal-playlist"
    | "/api/playlists/"
    | "/api/navidrome/[./path]"
    | "/api/navidrome/stream/$id"
    | "/api/playlists/liked-songs/sync"
    | "/api/playlists/smart/preview"
    | "/api/playlists/smart/"
    | "/api/navidrome/stream/id/id"
    | "/api/playlists/$id/songs/$songId"
    | "/api/playlists/$id/songs/";
  fileServerRoutesById: FileServerRoutesById;
}
export interface RootServerRouteChildren {
  ApiConfigServerRoute: typeof ApiConfigServerRoute;
  ApiDebugLibraryServerRoute: typeof ApiDebugLibraryServerRoute;
  ApiPlaylistServerRoute: typeof ApiPlaylistServerRoute;
  ApiPreferencesServerRoute: typeof ApiPreferencesServerRoute;
  ApiRecommendationsServerRoute: typeof ApiRecommendationsServerRouteWithChildren;
  ApiSearchServerRoute: typeof ApiSearchServerRoute;
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute;
  ApiAuthLoginServerRoute: typeof ApiAuthLoginServerRoute;
  ApiAuthRegisterServerRoute: typeof ApiAuthRegisterServerRoute;
  ApiLibraryProfileAnalyzeServerRoute: typeof ApiLibraryProfileAnalyzeServerRoute;
  ApiLidarrAddServerRoute: typeof ApiLidarrAddServerRoute;
  ApiLidarrAvailabilityServerRoute: typeof ApiLidarrAvailabilityServerRoute;
  ApiLidarrCancelServerRoute: typeof ApiLidarrCancelServerRoute;
  ApiLidarrHistoryServerRoute: typeof ApiLidarrHistoryServerRoute;
  ApiLidarrSearchServerRoute: typeof ApiLidarrSearchServerRoute;
  ApiLidarrStatusServerRoute: typeof ApiLidarrStatusServerRoute;
  ApiPlaylistsIdServerRoute: typeof ApiPlaylistsIdServerRouteWithChildren;
  ApiPlaylistsSyncServerRoute: typeof ApiPlaylistsSyncServerRoute;
  ApiPlaylistsIndexServerRoute: typeof ApiPlaylistsIndexServerRoute;
  ApiNavidromeChar91DotPathChar93ServerRoute: typeof ApiNavidromeChar91DotPathChar93ServerRoute;
  ApiNavidromeStreamIdServerRoute: typeof ApiNavidromeStreamIdServerRoute;
  ApiPlaylistsLikedSongsSyncServerRoute: typeof ApiPlaylistsLikedSongsSyncServerRoute;
  ApiPlaylistsSmartPreviewServerRoute: typeof ApiPlaylistsSmartPreviewServerRoute;
  ApiPlaylistsSmartIndexServerRoute: typeof ApiPlaylistsSmartIndexServerRoute;
  ApiNavidromeStreamIdIdServerRoute: typeof ApiNavidromeStreamIdIdServerRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/config": {
      id: "/config";
      path: "/config";
      fullPath: "/config";
      preLoaderRoute: typeof ConfigRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/dashboard": {
      id: "/dashboard";
      path: "/dashboard";
      fullPath: "/dashboard";
      preLoaderRoute: typeof DashboardRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/(auth)": {
      id: "/(auth)";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof authRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/settings/": {
      id: "/settings/";
      path: "/settings";
      fullPath: "/settings";
      preLoaderRoute: typeof SettingsIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/playlists/": {
      id: "/playlists/";
      path: "/playlists";
      fullPath: "/playlists";
      preLoaderRoute: typeof PlaylistsIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/downloads/": {
      id: "/downloads/";
      path: "/downloads";
      fullPath: "/downloads";
      preLoaderRoute: typeof DownloadsIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/dashboard/": {
      id: "/dashboard/";
      path: "/";
      fullPath: "/dashboard/";
      preLoaderRoute: typeof DashboardIndexRouteImport;
      parentRoute: typeof DashboardRouteRoute;
    };
    "/playlists/$id": {
      id: "/playlists/$id";
      path: "/playlists/$id";
      fullPath: "/playlists/$id";
      preLoaderRoute: typeof PlaylistsIdRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/library/search": {
      id: "/library/search";
      path: "/library/search";
      fullPath: "/library/search";
      preLoaderRoute: typeof LibrarySearchRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/library/artists": {
      id: "/library/artists";
      path: "/library/artists";
      fullPath: "/library/artists";
      preLoaderRoute: typeof LibraryArtistsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/downloads/status": {
      id: "/downloads/status";
      path: "/downloads/status";
      fullPath: "/downloads/status";
      preLoaderRoute: typeof DownloadsStatusRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/downloads/history": {
      id: "/downloads/history";
      path: "/downloads/history";
      fullPath: "/downloads/history";
      preLoaderRoute: typeof DownloadsHistoryRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/dashboard/analytics": {
      id: "/dashboard/analytics";
      path: "/analytics";
      fullPath: "/dashboard/analytics";
      preLoaderRoute: typeof DashboardAnalyticsRouteImport;
      parentRoute: typeof DashboardRouteRoute;
    };
    "/(auth)/signup": {
      id: "/(auth)/signup";
      path: "/signup";
      fullPath: "/signup";
      preLoaderRoute: typeof authSignupRouteImport;
      parentRoute: typeof authRouteRoute;
    };
    "/(auth)/login": {
      id: "/(auth)/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof authLoginRouteImport;
      parentRoute: typeof authRouteRoute;
    };
    "/library/artists/id": {
      id: "/library/artists/id";
      path: "/id";
      fullPath: "/library/artists/id";
      preLoaderRoute: typeof LibraryArtistsIdRouteImport;
      parentRoute: typeof LibraryArtistsRoute;
    };
    "/dashboard/recommendations/id": {
      id: "/dashboard/recommendations/id";
      path: "/recommendations/id";
      fullPath: "/dashboard/recommendations/id";
      preLoaderRoute: typeof DashboardRecommendationsIdRouteImport;
      parentRoute: typeof DashboardRouteRoute;
    };
    "/library/artists/id/albums/albumId": {
      id: "/library/artists/id/albums/albumId";
      path: "/albums/albumId";
      fullPath: "/library/artists/id/albums/albumId";
      preLoaderRoute: typeof LibraryArtistsIdAlbumsAlbumIdRouteImport;
      parentRoute: typeof LibraryArtistsIdRoute;
    };
  }
}
declare module "@tanstack/react-start/server" {
  interface ServerFileRoutesByPath {
    "/api/search": {
      id: "/api/search";
      path: "/api/search";
      fullPath: "/api/search";
      preLoaderRoute: typeof ApiSearchServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/recommendations": {
      id: "/api/recommendations";
      path: "/api/recommendations";
      fullPath: "/api/recommendations";
      preLoaderRoute: typeof ApiRecommendationsServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/preferences": {
      id: "/api/preferences";
      path: "/api/preferences";
      fullPath: "/api/preferences";
      preLoaderRoute: typeof ApiPreferencesServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/playlist": {
      id: "/api/playlist";
      path: "/api/playlist";
      fullPath: "/api/playlist";
      preLoaderRoute: typeof ApiPlaylistServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/debug-library": {
      id: "/api/debug-library";
      path: "/api/debug-library";
      fullPath: "/api/debug-library";
      preLoaderRoute: typeof ApiDebugLibraryServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/config": {
      id: "/api/config";
      path: "/api/config";
      fullPath: "/api/config";
      preLoaderRoute: typeof ApiConfigServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/playlists/": {
      id: "/api/playlists/";
      path: "/api/playlists";
      fullPath: "/api/playlists";
      preLoaderRoute: typeof ApiPlaylistsIndexServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/recommendations/seasonal-playlist": {
      id: "/api/recommendations/seasonal-playlist";
      path: "/seasonal-playlist";
      fullPath: "/api/recommendations/seasonal-playlist";
      preLoaderRoute: typeof ApiRecommendationsSeasonalPlaylistServerRouteImport;
      parentRoute: typeof ApiRecommendationsServerRoute;
    };
    "/api/recommendations/seasonal-insights": {
      id: "/api/recommendations/seasonal-insights";
      path: "/seasonal-insights";
      fullPath: "/api/recommendations/seasonal-insights";
      preLoaderRoute: typeof ApiRecommendationsSeasonalInsightsServerRouteImport;
      parentRoute: typeof ApiRecommendationsServerRoute;
    };
    "/api/recommendations/feedback": {
      id: "/api/recommendations/feedback";
      path: "/feedback";
      fullPath: "/api/recommendations/feedback";
      preLoaderRoute: typeof ApiRecommendationsFeedbackServerRouteImport;
      parentRoute: typeof ApiRecommendationsServerRoute;
    };
    "/api/recommendations/export": {
      id: "/api/recommendations/export";
      path: "/export";
      fullPath: "/api/recommendations/export";
      preLoaderRoute: typeof ApiRecommendationsExportServerRouteImport;
      parentRoute: typeof ApiRecommendationsServerRoute;
    };
    "/api/recommendations/clear": {
      id: "/api/recommendations/clear";
      path: "/clear";
      fullPath: "/api/recommendations/clear";
      preLoaderRoute: typeof ApiRecommendationsClearServerRouteImport;
      parentRoute: typeof ApiRecommendationsServerRoute;
    };
    "/api/recommendations/analytics": {
      id: "/api/recommendations/analytics";
      path: "/analytics";
      fullPath: "/api/recommendations/analytics";
      preLoaderRoute: typeof ApiRecommendationsAnalyticsServerRouteImport;
      parentRoute: typeof ApiRecommendationsServerRoute;
    };
    "/api/playlists/sync": {
      id: "/api/playlists/sync";
      path: "/api/playlists/sync";
      fullPath: "/api/playlists/sync";
      preLoaderRoute: typeof ApiPlaylistsSyncServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/playlists/$id": {
      id: "/api/playlists/$id";
      path: "/api/playlists/$id";
      fullPath: "/api/playlists/$id";
      preLoaderRoute: typeof ApiPlaylistsIdServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/lidarr/status": {
      id: "/api/lidarr/status";
      path: "/api/lidarr/status";
      fullPath: "/api/lidarr/status";
      preLoaderRoute: typeof ApiLidarrStatusServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/lidarr/search": {
      id: "/api/lidarr/search";
      path: "/api/lidarr/search";
      fullPath: "/api/lidarr/search";
      preLoaderRoute: typeof ApiLidarrSearchServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/lidarr/history": {
      id: "/api/lidarr/history";
      path: "/api/lidarr/history";
      fullPath: "/api/lidarr/history";
      preLoaderRoute: typeof ApiLidarrHistoryServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/lidarr/cancel": {
      id: "/api/lidarr/cancel";
      path: "/api/lidarr/cancel";
      fullPath: "/api/lidarr/cancel";
      preLoaderRoute: typeof ApiLidarrCancelServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/lidarr/availability": {
      id: "/api/lidarr/availability";
      path: "/api/lidarr/availability";
      fullPath: "/api/lidarr/availability";
      preLoaderRoute: typeof ApiLidarrAvailabilityServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/lidarr/add": {
      id: "/api/lidarr/add";
      path: "/api/lidarr/add";
      fullPath: "/api/lidarr/add";
      preLoaderRoute: typeof ApiLidarrAddServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/library-profile/analyze": {
      id: "/api/library-profile/analyze";
      path: "/api/library-profile/analyze";
      fullPath: "/api/library-profile/analyze";
      preLoaderRoute: typeof ApiLibraryProfileAnalyzeServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/auth/register": {
      id: "/api/auth/register";
      path: "/api/auth/register";
      fullPath: "/api/auth/register";
      preLoaderRoute: typeof ApiAuthRegisterServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/auth/login": {
      id: "/api/auth/login";
      path: "/api/auth/login";
      fullPath: "/api/auth/login";
      preLoaderRoute: typeof ApiAuthLoginServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/auth/$": {
      id: "/api/auth/$";
      path: "/api/auth/$";
      fullPath: "/api/auth/$";
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/playlists/smart/": {
      id: "/api/playlists/smart/";
      path: "/api/playlists/smart";
      fullPath: "/api/playlists/smart";
      preLoaderRoute: typeof ApiPlaylistsSmartIndexServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/playlists/smart/preview": {
      id: "/api/playlists/smart/preview";
      path: "/api/playlists/smart/preview";
      fullPath: "/api/playlists/smart/preview";
      preLoaderRoute: typeof ApiPlaylistsSmartPreviewServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/playlists/liked-songs/sync": {
      id: "/api/playlists/liked-songs/sync";
      path: "/api/playlists/liked-songs/sync";
      fullPath: "/api/playlists/liked-songs/sync";
      preLoaderRoute: typeof ApiPlaylistsLikedSongsSyncServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/navidrome/stream/$id": {
      id: "/api/navidrome/stream/$id";
      path: "/api/navidrome/stream/$id";
      fullPath: "/api/navidrome/stream/$id";
      preLoaderRoute: typeof ApiNavidromeStreamIdServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/navidrome/[./path]": {
      id: "/api/navidrome/[./path]";
      path: "/api/navidrome/[./path]";
      fullPath: "/api/navidrome/[./path]";
      preLoaderRoute: typeof ApiNavidromeChar91DotPathChar93ServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/playlists/$id/songs/": {
      id: "/api/playlists/$id/songs/";
      path: "/songs";
      fullPath: "/api/playlists/$id/songs";
      preLoaderRoute: typeof ApiPlaylistsIdSongsIndexServerRouteImport;
      parentRoute: typeof ApiPlaylistsIdServerRoute;
    };
    "/api/playlists/$id/songs/$songId": {
      id: "/api/playlists/$id/songs/$songId";
      path: "/songs/$songId";
      fullPath: "/api/playlists/$id/songs/$songId";
      preLoaderRoute: typeof ApiPlaylistsIdSongsSongIdServerRouteImport;
      parentRoute: typeof ApiPlaylistsIdServerRoute;
    };
    "/api/navidrome/stream/id/id": {
      id: "/api/navidrome/stream/id/id";
      path: "/api/navidrome/stream/id/id";
      fullPath: "/api/navidrome/stream/id/id";
      preLoaderRoute: typeof ApiNavidromeStreamIdIdServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
  }
}

interface authRouteRouteChildren {
  authLoginRoute: typeof authLoginRoute;
  authSignupRoute: typeof authSignupRoute;
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginRoute: authLoginRoute,
  authSignupRoute: authSignupRoute,
};

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
);

interface DashboardRouteRouteChildren {
  DashboardAnalyticsRoute: typeof DashboardAnalyticsRoute;
  DashboardIndexRoute: typeof DashboardIndexRoute;
  DashboardRecommendationsIdRoute: typeof DashboardRecommendationsIdRoute;
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardAnalyticsRoute: DashboardAnalyticsRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardRecommendationsIdRoute: DashboardRecommendationsIdRoute,
};

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
);

interface LibraryArtistsIdRouteChildren {
  LibraryArtistsIdAlbumsAlbumIdRoute: typeof LibraryArtistsIdAlbumsAlbumIdRoute;
}

const LibraryArtistsIdRouteChildren: LibraryArtistsIdRouteChildren = {
  LibraryArtistsIdAlbumsAlbumIdRoute: LibraryArtistsIdAlbumsAlbumIdRoute,
};

const LibraryArtistsIdRouteWithChildren =
  LibraryArtistsIdRoute._addFileChildren(LibraryArtistsIdRouteChildren);

interface LibraryArtistsRouteChildren {
  LibraryArtistsIdRoute: typeof LibraryArtistsIdRouteWithChildren;
}

const LibraryArtistsRouteChildren: LibraryArtistsRouteChildren = {
  LibraryArtistsIdRoute: LibraryArtistsIdRouteWithChildren,
};

const LibraryArtistsRouteWithChildren = LibraryArtistsRoute._addFileChildren(
  LibraryArtistsRouteChildren,
);

interface ApiRecommendationsServerRouteChildren {
  ApiRecommendationsAnalyticsServerRoute: typeof ApiRecommendationsAnalyticsServerRoute;
  ApiRecommendationsClearServerRoute: typeof ApiRecommendationsClearServerRoute;
  ApiRecommendationsExportServerRoute: typeof ApiRecommendationsExportServerRoute;
  ApiRecommendationsFeedbackServerRoute: typeof ApiRecommendationsFeedbackServerRoute;
  ApiRecommendationsSeasonalInsightsServerRoute: typeof ApiRecommendationsSeasonalInsightsServerRoute;
  ApiRecommendationsSeasonalPlaylistServerRoute: typeof ApiRecommendationsSeasonalPlaylistServerRoute;
}

const ApiRecommendationsServerRouteChildren: ApiRecommendationsServerRouteChildren =
  {
    ApiRecommendationsAnalyticsServerRoute:
      ApiRecommendationsAnalyticsServerRoute,
    ApiRecommendationsClearServerRoute: ApiRecommendationsClearServerRoute,
    ApiRecommendationsExportServerRoute: ApiRecommendationsExportServerRoute,
    ApiRecommendationsFeedbackServerRoute:
      ApiRecommendationsFeedbackServerRoute,
    ApiRecommendationsSeasonalInsightsServerRoute:
      ApiRecommendationsSeasonalInsightsServerRoute,
    ApiRecommendationsSeasonalPlaylistServerRoute:
      ApiRecommendationsSeasonalPlaylistServerRoute,
  };

const ApiRecommendationsServerRouteWithChildren =
  ApiRecommendationsServerRoute._addFileChildren(
    ApiRecommendationsServerRouteChildren,
  );

interface ApiPlaylistsIdServerRouteChildren {
  ApiPlaylistsIdSongsSongIdServerRoute: typeof ApiPlaylistsIdSongsSongIdServerRoute;
  ApiPlaylistsIdSongsIndexServerRoute: typeof ApiPlaylistsIdSongsIndexServerRoute;
}

const ApiPlaylistsIdServerRouteChildren: ApiPlaylistsIdServerRouteChildren = {
  ApiPlaylistsIdSongsSongIdServerRoute: ApiPlaylistsIdSongsSongIdServerRoute,
  ApiPlaylistsIdSongsIndexServerRoute: ApiPlaylistsIdSongsIndexServerRoute,
};

const ApiPlaylistsIdServerRouteWithChildren =
  ApiPlaylistsIdServerRoute._addFileChildren(ApiPlaylistsIdServerRouteChildren);

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authRouteRoute: authRouteRouteWithChildren,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  ConfigRoute: ConfigRoute,
  DownloadsHistoryRoute: DownloadsHistoryRoute,
  DownloadsStatusRoute: DownloadsStatusRoute,
  LibraryArtistsRoute: LibraryArtistsRouteWithChildren,
  LibrarySearchRoute: LibrarySearchRoute,
  PlaylistsIdRoute: PlaylistsIdRoute,
  DownloadsIndexRoute: DownloadsIndexRoute,
  PlaylistsIndexRoute: PlaylistsIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiConfigServerRoute: ApiConfigServerRoute,
  ApiDebugLibraryServerRoute: ApiDebugLibraryServerRoute,
  ApiPlaylistServerRoute: ApiPlaylistServerRoute,
  ApiPreferencesServerRoute: ApiPreferencesServerRoute,
  ApiRecommendationsServerRoute: ApiRecommendationsServerRouteWithChildren,
  ApiSearchServerRoute: ApiSearchServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiAuthLoginServerRoute: ApiAuthLoginServerRoute,
  ApiAuthRegisterServerRoute: ApiAuthRegisterServerRoute,
  ApiLibraryProfileAnalyzeServerRoute: ApiLibraryProfileAnalyzeServerRoute,
  ApiLidarrAddServerRoute: ApiLidarrAddServerRoute,
  ApiLidarrAvailabilityServerRoute: ApiLidarrAvailabilityServerRoute,
  ApiLidarrCancelServerRoute: ApiLidarrCancelServerRoute,
  ApiLidarrHistoryServerRoute: ApiLidarrHistoryServerRoute,
  ApiLidarrSearchServerRoute: ApiLidarrSearchServerRoute,
  ApiLidarrStatusServerRoute: ApiLidarrStatusServerRoute,
  ApiPlaylistsIdServerRoute: ApiPlaylistsIdServerRouteWithChildren,
  ApiPlaylistsSyncServerRoute: ApiPlaylistsSyncServerRoute,
  ApiPlaylistsIndexServerRoute: ApiPlaylistsIndexServerRoute,
  ApiNavidromeChar91DotPathChar93ServerRoute:
    ApiNavidromeChar91DotPathChar93ServerRoute,
  ApiNavidromeStreamIdServerRoute: ApiNavidromeStreamIdServerRoute,
  ApiPlaylistsLikedSongsSyncServerRoute: ApiPlaylistsLikedSongsSyncServerRoute,
  ApiPlaylistsSmartPreviewServerRoute: ApiPlaylistsSmartPreviewServerRoute,
  ApiPlaylistsSmartIndexServerRoute: ApiPlaylistsSmartIndexServerRoute,
  ApiNavidromeStreamIdIdServerRoute: ApiNavidromeStreamIdIdServerRoute,
};
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>();
