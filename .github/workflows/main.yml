name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Lint code
        run: npm run lint
        
      - name: Build project
        run: npm run build
        
      - name: Run unit tests
        run: npm run test
        
      - name: Run unit tests with coverage (optional)
        run: npm run test:coverage || echo "Coverage test skipped - will configure later"
        continue-on-error: true
        
      - name: Check basic test success
        run: |
          if [ -f test-results.json ] && grep -q '"status":"pass"' test-results.json; then
            echo "Basic tests passed"
          else
            echo "Basic tests failed"
            exit 1
          fi
        if: always()
        
      - name: Upload test coverage (if available)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false
        if: success()
        continue-on-error: true

  security:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: npm audit --audit-level high
        continue-on-error: true
        
      - name: Fail on high/critical vulnerabilities
        run: |
          if npm audit --json --audit-level high | jq -e '.auditReport.vulnerabilities.high > 0 or .auditReport.vulnerabilities.critical > 0' > /dev/null 2>&1; then
            echo "High or critical vulnerabilities found!"
            exit 1
          fi
        if: always()

  secret-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Run Gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
        
      - name: Fail if secrets detected
        run: |
          if [ -f gitleaks.txt ] && [ $(wc -l < gitleaks.txt) -gt 0 ]; then
            echo "Secrets detected in code!"
            cat gitleaks.txt
            exit 1
          fi
        if: always()