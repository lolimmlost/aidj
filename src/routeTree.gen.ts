/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from "@tanstack/react-start/server";

import { Route as rootRouteImport } from "./routes/__root";
import { Route as ConfigRouteImport } from "./routes/config";
import { Route as DashboardRouteRouteImport } from "./routes/dashboard/route";
import { Route as authRouteRouteImport } from "./routes/(auth)/route";
import { Route as IndexRouteImport } from "./routes/index";
import { Route as DashboardIndexRouteImport } from "./routes/dashboard/index";
import { Route as LibrarySearchRouteImport } from "./routes/library/search";
import { Route as LibraryArtistsRouteImport } from "./routes/library/artists";
import { Route as authSignupRouteImport } from "./routes/(auth)/signup";
import { Route as authLoginRouteImport } from "./routes/(auth)/login";
import { Route as LibraryArtistsIdRouteImport } from "./routes/library/artists/[id]";
import { Route as LibraryArtistsIdAlbumsAlbumIdRouteImport } from "./routes/library/artists/[id]/albums/[albumId]";
import { ServerRoute as ApiConfigServerRouteImport } from "./routes/api/config";
import { ServerRoute as ApiAuthRegisterServerRouteImport } from "./routes/api/auth/register";
import { ServerRoute as ApiAuthLoginServerRouteImport } from "./routes/api/auth/login";
import { ServerRoute as ApiAuthSplatServerRouteImport } from "./routes/api/auth/$";
import { ServerRoute as ApiNavidromeChar91DotPathChar93ServerRouteImport } from "./routes/api/navidrome/[...path]";

const rootServerRouteImport = createServerRootRoute();

const ConfigRoute = ConfigRouteImport.update({
  id: "/config",
  path: "/config",
  getParentRoute: () => rootRouteImport,
} as any);
const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: "/dashboard",
  path: "/dashboard",
  getParentRoute: () => rootRouteImport,
} as any);
const authRouteRoute = authRouteRouteImport.update({
  id: "/(auth)",
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any);
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => DashboardRouteRoute,
} as any);
const LibrarySearchRoute = LibrarySearchRouteImport.update({
  id: "/library/search",
  path: "/library/search",
  getParentRoute: () => rootRouteImport,
} as any);
const LibraryArtistsRoute = LibraryArtistsRouteImport.update({
  id: "/library/artists",
  path: "/library/artists",
  getParentRoute: () => rootRouteImport,
} as any);
const authSignupRoute = authSignupRouteImport.update({
  id: "/signup",
  path: "/signup",
  getParentRoute: () => authRouteRoute,
} as any);
const authLoginRoute = authLoginRouteImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => authRouteRoute,
} as any);
const LibraryArtistsIdRoute = LibraryArtistsIdRouteImport.update({
  id: "/id",
  path: "/id",
  getParentRoute: () => LibraryArtistsRoute,
} as any);
const LibraryArtistsIdAlbumsAlbumIdRoute =
  LibraryArtistsIdAlbumsAlbumIdRouteImport.update({
    id: "/albums/albumId",
    path: "/albums/albumId",
    getParentRoute: () => LibraryArtistsIdRoute,
  } as any);
const ApiConfigServerRoute = ApiConfigServerRouteImport.update({
  id: "/api/config",
  path: "/api/config",
  getParentRoute: () => rootServerRouteImport,
} as any);
const ApiAuthRegisterServerRoute = ApiAuthRegisterServerRouteImport.update({
  id: "/api/auth/register",
  path: "/api/auth/register",
  getParentRoute: () => rootServerRouteImport,
} as any);
const ApiAuthLoginServerRoute = ApiAuthLoginServerRouteImport.update({
  id: "/api/auth/login",
  path: "/api/auth/login",
  getParentRoute: () => rootServerRouteImport,
} as any);
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: "/api/auth/$",
  path: "/api/auth/$",
  getParentRoute: () => rootServerRouteImport,
} as any);
const ApiNavidromeChar91DotPathChar93ServerRoute =
  ApiNavidromeChar91DotPathChar93ServerRouteImport.update({
    id: "/api/navidrome/[./path]",
    path: "/api/navidrome/[./path]",
    getParentRoute: () => rootServerRouteImport,
  } as any);

export interface FileRoutesByFullPath {
  "/": typeof authRouteRouteWithChildren;
  "/dashboard": typeof DashboardRouteRouteWithChildren;
  "/config": typeof ConfigRoute;
  "/login": typeof authLoginRoute;
  "/signup": typeof authSignupRoute;
  "/library/artists": typeof LibraryArtistsRouteWithChildren;
  "/library/search": typeof LibrarySearchRoute;
  "/dashboard/": typeof DashboardIndexRoute;
  "/library/artists/id": typeof LibraryArtistsIdRouteWithChildren;
  "/library/artists/id/albums/albumId": typeof LibraryArtistsIdAlbumsAlbumIdRoute;
}
export interface FileRoutesByTo {
  "/": typeof authRouteRouteWithChildren;
  "/config": typeof ConfigRoute;
  "/login": typeof authLoginRoute;
  "/signup": typeof authSignupRoute;
  "/library/artists": typeof LibraryArtistsRouteWithChildren;
  "/library/search": typeof LibrarySearchRoute;
  "/dashboard": typeof DashboardIndexRoute;
  "/library/artists/id": typeof LibraryArtistsIdRouteWithChildren;
  "/library/artists/id/albums/albumId": typeof LibraryArtistsIdAlbumsAlbumIdRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexRoute;
  "/(auth)": typeof authRouteRouteWithChildren;
  "/dashboard": typeof DashboardRouteRouteWithChildren;
  "/config": typeof ConfigRoute;
  "/(auth)/login": typeof authLoginRoute;
  "/(auth)/signup": typeof authSignupRoute;
  "/library/artists": typeof LibraryArtistsRouteWithChildren;
  "/library/search": typeof LibrarySearchRoute;
  "/dashboard/": typeof DashboardIndexRoute;
  "/library/artists/id": typeof LibraryArtistsIdRouteWithChildren;
  "/library/artists/id/albums/albumId": typeof LibraryArtistsIdAlbumsAlbumIdRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/dashboard"
    | "/config"
    | "/login"
    | "/signup"
    | "/library/artists"
    | "/library/search"
    | "/dashboard/"
    | "/library/artists/id"
    | "/library/artists/id/albums/albumId";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/config"
    | "/login"
    | "/signup"
    | "/library/artists"
    | "/library/search"
    | "/dashboard"
    | "/library/artists/id"
    | "/library/artists/id/albums/albumId";
  id:
    | "__root__"
    | "/"
    | "/(auth)"
    | "/dashboard"
    | "/config"
    | "/(auth)/login"
    | "/(auth)/signup"
    | "/library/artists"
    | "/library/search"
    | "/dashboard/"
    | "/library/artists/id"
    | "/library/artists/id/albums/albumId";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  authRouteRoute: typeof authRouteRouteWithChildren;
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren;
  ConfigRoute: typeof ConfigRoute;
  LibraryArtistsRoute: typeof LibraryArtistsRouteWithChildren;
  LibrarySearchRoute: typeof LibrarySearchRoute;
}
export interface FileServerRoutesByFullPath {
  "/api/config": typeof ApiConfigServerRoute;
  "/api/auth/$": typeof ApiAuthSplatServerRoute;
  "/api/auth/login": typeof ApiAuthLoginServerRoute;
  "/api/auth/register": typeof ApiAuthRegisterServerRoute;
  "/api/navidrome/[./path]": typeof ApiNavidromeChar91DotPathChar93ServerRoute;
}
export interface FileServerRoutesByTo {
  "/api/config": typeof ApiConfigServerRoute;
  "/api/auth/$": typeof ApiAuthSplatServerRoute;
  "/api/auth/login": typeof ApiAuthLoginServerRoute;
  "/api/auth/register": typeof ApiAuthRegisterServerRoute;
  "/api/navidrome/[./path]": typeof ApiNavidromeChar91DotPathChar93ServerRoute;
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport;
  "/api/config": typeof ApiConfigServerRoute;
  "/api/auth/$": typeof ApiAuthSplatServerRoute;
  "/api/auth/login": typeof ApiAuthLoginServerRoute;
  "/api/auth/register": typeof ApiAuthRegisterServerRoute;
  "/api/navidrome/[./path]": typeof ApiNavidromeChar91DotPathChar93ServerRoute;
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath;
  fullPaths:
    | "/api/config"
    | "/api/auth/$"
    | "/api/auth/login"
    | "/api/auth/register"
    | "/api/navidrome/[./path]";
  fileServerRoutesByTo: FileServerRoutesByTo;
  to:
    | "/api/config"
    | "/api/auth/$"
    | "/api/auth/login"
    | "/api/auth/register"
    | "/api/navidrome/[./path]";
  id:
    | "__root__"
    | "/api/config"
    | "/api/auth/$"
    | "/api/auth/login"
    | "/api/auth/register"
    | "/api/navidrome/[./path]";
  fileServerRoutesById: FileServerRoutesById;
}
export interface RootServerRouteChildren {
  ApiConfigServerRoute: typeof ApiConfigServerRoute;
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute;
  ApiAuthLoginServerRoute: typeof ApiAuthLoginServerRoute;
  ApiAuthRegisterServerRoute: typeof ApiAuthRegisterServerRoute;
  ApiNavidromeChar91DotPathChar93ServerRoute: typeof ApiNavidromeChar91DotPathChar93ServerRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/config": {
      id: "/config";
      path: "/config";
      fullPath: "/config";
      preLoaderRoute: typeof ConfigRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/dashboard": {
      id: "/dashboard";
      path: "/dashboard";
      fullPath: "/dashboard";
      preLoaderRoute: typeof DashboardRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/(auth)": {
      id: "/(auth)";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof authRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/dashboard/": {
      id: "/dashboard/";
      path: "/";
      fullPath: "/dashboard/";
      preLoaderRoute: typeof DashboardIndexRouteImport;
      parentRoute: typeof DashboardRouteRoute;
    };
    "/library/search": {
      id: "/library/search";
      path: "/library/search";
      fullPath: "/library/search";
      preLoaderRoute: typeof LibrarySearchRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/library/artists": {
      id: "/library/artists";
      path: "/library/artists";
      fullPath: "/library/artists";
      preLoaderRoute: typeof LibraryArtistsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/(auth)/signup": {
      id: "/(auth)/signup";
      path: "/signup";
      fullPath: "/signup";
      preLoaderRoute: typeof authSignupRouteImport;
      parentRoute: typeof authRouteRoute;
    };
    "/(auth)/login": {
      id: "/(auth)/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof authLoginRouteImport;
      parentRoute: typeof authRouteRoute;
    };
    "/library/artists/id": {
      id: "/library/artists/id";
      path: "/id";
      fullPath: "/library/artists/id";
      preLoaderRoute: typeof LibraryArtistsIdRouteImport;
      parentRoute: typeof LibraryArtistsRoute;
    };
    "/library/artists/id/albums/albumId": {
      id: "/library/artists/id/albums/albumId";
      path: "/albums/albumId";
      fullPath: "/library/artists/id/albums/albumId";
      preLoaderRoute: typeof LibraryArtistsIdAlbumsAlbumIdRouteImport;
      parentRoute: typeof LibraryArtistsIdRoute;
    };
  }
}
declare module "@tanstack/react-start/server" {
  interface ServerFileRoutesByPath {
    "/api/config": {
      id: "/api/config";
      path: "/api/config";
      fullPath: "/api/config";
      preLoaderRoute: typeof ApiConfigServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/auth/register": {
      id: "/api/auth/register";
      path: "/api/auth/register";
      fullPath: "/api/auth/register";
      preLoaderRoute: typeof ApiAuthRegisterServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/auth/login": {
      id: "/api/auth/login";
      path: "/api/auth/login";
      fullPath: "/api/auth/login";
      preLoaderRoute: typeof ApiAuthLoginServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/auth/$": {
      id: "/api/auth/$";
      path: "/api/auth/$";
      fullPath: "/api/auth/$";
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    "/api/navidrome/[./path]": {
      id: "/api/navidrome/[./path]";
      path: "/api/navidrome/[./path]";
      fullPath: "/api/navidrome/[./path]";
      preLoaderRoute: typeof ApiNavidromeChar91DotPathChar93ServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
  }
}

interface authRouteRouteChildren {
  authLoginRoute: typeof authLoginRoute;
  authSignupRoute: typeof authSignupRoute;
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginRoute: authLoginRoute,
  authSignupRoute: authSignupRoute,
};

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
);

interface DashboardRouteRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute;
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
};

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
);

interface LibraryArtistsIdRouteChildren {
  LibraryArtistsIdAlbumsAlbumIdRoute: typeof LibraryArtistsIdAlbumsAlbumIdRoute;
}

const LibraryArtistsIdRouteChildren: LibraryArtistsIdRouteChildren = {
  LibraryArtistsIdAlbumsAlbumIdRoute: LibraryArtistsIdAlbumsAlbumIdRoute,
};

const LibraryArtistsIdRouteWithChildren =
  LibraryArtistsIdRoute._addFileChildren(LibraryArtistsIdRouteChildren);

interface LibraryArtistsRouteChildren {
  LibraryArtistsIdRoute: typeof LibraryArtistsIdRouteWithChildren;
}

const LibraryArtistsRouteChildren: LibraryArtistsRouteChildren = {
  LibraryArtistsIdRoute: LibraryArtistsIdRouteWithChildren,
};

const LibraryArtistsRouteWithChildren = LibraryArtistsRoute._addFileChildren(
  LibraryArtistsRouteChildren,
);

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authRouteRoute: authRouteRouteWithChildren,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  ConfigRoute: ConfigRoute,
  LibraryArtistsRoute: LibraryArtistsRouteWithChildren,
  LibrarySearchRoute: LibrarySearchRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiConfigServerRoute: ApiConfigServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiAuthLoginServerRoute: ApiAuthLoginServerRoute,
  ApiAuthRegisterServerRoute: ApiAuthRegisterServerRoute,
  ApiNavidromeChar91DotPathChar93ServerRoute:
    ApiNavidromeChar91DotPathChar93ServerRoute,
};
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>();
